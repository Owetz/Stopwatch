{"version":3,"sources":["components/Controller/Controller.js","components/Clockface/Clockface.js","components/Splitbox/Splitbox.js","StopWatch.js","serviceWorker.js","index.js"],"names":["Controller","props","className","class","onClick","name","toUpperCase","Clockface","time","Splitbox","splits","map","split","index","lap","length","key","transitionName","transitionEnterTimeout","transitionLeave","StopWatch","state","showTime","isRunning","startClock","bind","stopClock","resetClock","splitClock","clearInterval","this","timer","min","Math","floor","sec","toFixed","startTime","Date","now","setInterval","setState","timeFormat","unshift","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f278b8a.chunk.js","sourcesContent":["import React from 'react';\nimport './Controller.css';\n\nfunction Controller(props) {\n    return (\n        <button className={props.class} onClick={props.onClick}>{props.name.toUpperCase()}</button>\n    )\n}\n\nexport default Controller;","import React from 'react';\nimport './Clockface.css';\n\nfunction Clockface({time}) {\n\n    return (\n    <div className=\"clockFace\">\n        <p>{time}</p>\n    </div>\n    )\n}\n\nexport default Clockface;","import React from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport './Splitbox.css';\n\nfunction Splitbox(props) {\n    let splits = props.splits.map((split, index) => {\n        let lap = props.splits.length - index;\n        lap = lap < 10 ? '0'+lap : lap; \n        return <p key={split}>{lap}:   {split}</p>;\n    })\n    if (splits.length === 0) {\n\n    }\n    return (\n        <div className=\"splitBox\">\n            <ReactCSSTransitionGroup\n                transitionName=\"fadeinright\"\n                transitionEnterTimeout={300}\n                transitionLeave={false}\n                >\n                {splits}\n            </ReactCSSTransitionGroup>\n        </div>\n    )\n}\n\nexport default Splitbox;","import React from 'react';\nimport './StopWatch.css';\nimport Controller from './components/Controller/Controller';\nimport Clockface from './components/Clockface/Clockface';\nimport Splitbox from './components/Splitbox/Splitbox';\n\nclass StopWatch extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      time: 0,\n      showTime: '00:00.00',\n      splits: [],\n      isRunning: false,\n    }\n    this.startClock = this.startClock.bind(this);\n    this.stopClock = this.stopClock.bind(this);\n    this.resetClock = this.resetClock.bind(this);\n    this.splitClock = this.splitClock.bind(this);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  //  Formats the milliseconds to be used to show time.\n  timeFormat(time) {\n    let min = Math.floor((time / (1000 * 60)) % 60);\n    let sec = ((time % 60000)/ 1000).toFixed(2);\n    return `${min === 0 ? '00:': (min.length < 2 ? `${min}:`:`0${min}:`)}${sec.length < 5 ? `0${sec}` : sec}`;\n  }\n  \n  // Controllermethods\n  startClock() {\n    const startTime = Date.now() - this.state.time;\n    this.timer = setInterval(() => {\n      this.setState({\n        isRunning: true,\n        time: Date.now() - startTime,\n        showTime: this.timeFormat(Date.now() - startTime)\n      });\n    });\n  }\n  resetClock() {\n    this.setState({time: 0, isRunning:false, splits:[], showTime:'00:00.00'});\n  }\n  stopClock() {\n    clearInterval(this.timer);\n    this.setState({isRunning:false});\n  }\n  splitClock() {\n    let time = this.state.showTime;\n    let splits = this.state.splits;\n    splits.unshift(time);\n    this.setState({splits:splits});\n  }\n\n\n  render() {\n    const {splitClock, startClock, stopClock, resetClock} = this; // Getting the methods from this.\n    const {showTime, time, splits, isRunning} = this.state; // Getting the properties of state.\n    \n    return (\n      <main>\n        <Clockface time={showTime} />\n        <Splitbox splits={splits} />\n        <div className=\"btnBox\">\n          <Controller \n          name={isRunning ? 'Stopp' : (time === 0 ? 'Start':'Fortsätt')} \n          onClick={isRunning ? stopClock : startClock} \n          class={isRunning ? 'red' : 'green'}/>\n\n          <Controller \n          name={isRunning ? 'Varv' : 'Återställ'} \n          onClick={isRunning ? splitClock : resetClock} \n          class={isRunning ? 'green':'red'}/>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default StopWatch;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport StopWatch from './StopWatch';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<StopWatch />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}